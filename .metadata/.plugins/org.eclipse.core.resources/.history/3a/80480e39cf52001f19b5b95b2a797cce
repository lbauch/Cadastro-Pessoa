package com.cursoJava.Curso.services;

import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.GetMapping;

import com.cursoJava.Curso.entities.Endereco;
import com.cursoJava.Curso.entities.Pessoa;
import com.cursoJava.Curso.repositories.PessoaRepository;
import com.cursoJava.Curso.resources.PessoaResource;
import com.cursoJava.Curso.services.exceptions.DatabaseException;
import com.cursoJava.Curso.services.exceptions.ResourceNotFoundException;
import com.opencsv.CSVWriter;

import jakarta.persistence.EntityNotFoundException;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class PessoaService {

	private static final String CSV_PATH = "/generatedCsv.csv";

	public static final Logger log = LoggerFactory.getLogger(PessoaService.class);
	
	@Autowired
	private PessoaRepository repository;
	
	@Autowired
	private	EnderecoService endService;
	
	public List<Pessoa> findAll(){
		log.debug("findAll");
		return repository.findAll();
	}
		
	public Pessoa findById(Long id) {
		Optional<Pessoa> obj = repository.findById(id);
		log.debug("findById,{},endereço,{}", repository.toString(), endService.toString());
		return obj.get();
	}
	
	public Pessoa insert(Pessoa obj) {
		Endereco end = endService.consultaEnderecoViaCeps(obj.getEndereco().getCep(), obj.getEndereco().getNumero(), obj.getEndereco().getComplemento());
		obj.setEndereco(end);
		endService.inserir(end);
		log.debug("instert,{},endereço,{}", repository.toString(), endService.toString());
		return repository.save(obj);
	}

	public void delete(Long id) {
		try {
			repository.deleteById(id);
		} catch (EmptyResultDataAccessException e) {
			throw new ResourceNotFoundException(id);
		} catch (DataIntegrityViolationException e) {
			throw new DatabaseException(e.getMessage());
		}
	}

	public Pessoa update(Long id, Pessoa obj) {
		try {
			Pessoa entity = repository.getReferenceById(id);
			updateData(entity, obj);
			return repository.save(entity);
		} catch (EntityNotFoundException e) {
			throw new ResourceNotFoundException(id);
		}
	}

	private void updateData(Pessoa entity, Pessoa obj) {
		entity.setNome(obj.getNome());
		entity.setFone(obj.getFone());
		entity.setCpf(obj.getCpf());
	}

	public void gerarCsv() {
				
		try {
			
			FileWriter fw = new FileWriter(new File(CSV_PATH));
			CSVWriter cw = new CSVWriter(fw);
			
			String[] headers = {"id", "nome", "fone", "cpf", "cep", "logradouro", "complemento", "bairro", "localidade", "uf", "numero"};
			
			List<Pessoa> pessoas = findAll(); 
			List<String[]> data = new ArrayList<String[]>();
			
			data.add(headers);
			
			for(Pessoa p: pessoas) {
				String[] item = {p.getId().toString(), p.getNome(), p.getFone(), p.getCpf(), p.getEndereco().getCep(), p.getEndereco().getLogradouro(),
						p.getEndereco().getComplemento(), p.getEndereco().getBairro(), p.getEndereco().getLocalidade(), p.getEndereco().getUf(), p.getEndereco().getNumero()};
				
				data.add(item);
			}
			
			cw.writeAll(data);
			
			cw.close();
			fw.close();
			
		}catch (Exception e) {
			e.printStackTrace();
		}

	}
	
}