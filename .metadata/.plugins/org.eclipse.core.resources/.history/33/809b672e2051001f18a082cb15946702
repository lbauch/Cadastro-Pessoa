package com.cursoJava.Curso.config;

import java.time.Instant;
import java.util.Arrays;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;

import com.cursoJava.Curso.entities.Endereco;
import com.cursoJava.Curso.entities.Municipio;
import com.cursoJava.Curso.entities.enums.Uf;
import com.cursoJava.Curso.repositories.EnderecoRepository;
import com.cursoJava.Curso.repositories.MunicipioRepository;
import com.cursoJava.Curso.repositories.PessoaRepository;

@Configuration
@Profile("test")
public class TestConfig implements CommandLineRunner{

	//@Autowired simboliza injeção de dependência
	@Autowired
	private EnderecoRepository enderecoRepository;
	
	@Autowired
	private MunicipioRepository orderRepository;

	@Autowired
	private PessoaRepository categoryRepository;
	
		Municipio mun1 = new Municipio(null, "Blumenau", Uf.SC);
		Municipio mun2 = new Municipio(null, "Gaspar", Uf.SC);
		Municipio mun3 = new Municipio(null, "São Paulo", Uf.SP);
		
		Endereco e1 = new Endereco(null, "89053500", "Itoupava Norte", "S/N", "Casa", mun1);
		Endereco e2 = new Endereco(null, "85010013", "Bela Vista", "1503", null, mun2);
		Endereco e3 = new Endereco(null, "85010013", "Guarani", "111", "Apto 505", mun3);

		Pessoa p1 = new Pessoa(null, "Fulano", "00000000000", "11111111111", e1);
		
		
		p1.getCategories().add(cat2);
		p2.getCategories().add(cat1);
		p2.getCategories().add(cat3);
		p3.getCategories().add(cat3);
		p4.getCategories().add(cat3);
		p5.getCategories().add(cat2);
		
		productRepository.saveAll(Arrays.asList(p1,p2,p3,p4,p5));
		
		User u1 = new User(null, "Maria Brown", "maria@gmail.com", "988888888", "123456");
		User u2 = new User(null, "Alex Green", "alex@gmail.com", "977777777", "123456");
		
		Order o1 = new Order(null, Instant.parse("2019-06-20T19:53:07Z"), OrderStatus.PAID, u1);
		Order o2 = new Order(null, Instant.parse("2019-07-21T03:42:10Z"), OrderStatus.WAITING_PAYMENT, u2);
		Order o3 = new Order(null, Instant.parse("2019-07-22T15:21:22Z"), OrderStatus.WAITING_PAYMENT, u1);

		userRepository.saveAll(Arrays.asList(u1,u2));
		orderRepository.saveAll(Arrays.asList(o1,o2,o3));
		
		OrderItem oi1 = new OrderItem(o1, p1, 2, p1.getPrice());
		OrderItem oi2 = new OrderItem(o1, p3, 1, p3.getPrice());
		OrderItem oi3 = new OrderItem(o2, p3, 2, p3.getPrice());
		OrderItem oi4 = new OrderItem(o3, p5, 2, p5.getPrice());
		
		orderItemRepository.saveAll(Arrays.asList(oi1, oi2, oi3, oi4));
		
		Payment pay1 = new Payment(o1.getId(), Instant.parse("2019-06-20T21:53:07Z"), o1);

		o1.setPayment(pay1);
		
		orderItemRepository.save(oi1);
		paymentRepository.save(pay1);
		
	}
	
	
}
*/
